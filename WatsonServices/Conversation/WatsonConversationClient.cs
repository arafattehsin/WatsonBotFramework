//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v5.5.6093.14744 (http://NSwag.org)
// </auto-generated>
//----------------------

using Newtonsoft.Json;
using System;
using System.CodeDom.Compiler;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using WatsonServices.Conversation.Models;

namespace WatsonServices.Conversation
{
#pragma warning disable // Disable all warnings

    [Serializable]
    [GeneratedCode("NSwag", "5.5.6093.14744")]
    public partial class WatsonConversationClient 
    {
        private readonly string UserName;
        private readonly string Password;

        /// <summary>
        /// Unique identifier of the workspace.
        /// </summary>
        private readonly string WorkspaceId;

        /// <summary>
        /// Release date of the API version in YYYY-MM-DD format.</param>
        /// </summary>
        private readonly string Version;

        public const string DefaultBaseUrl = "https://watson-api-explorer.mybluemix.net/conversation/api";
        public const string DefaultVersion = "2016-07-11";

        /// <summary>
        /// 
        /// </summary>
        /// 
        /// <param name="workspace_id">Unique identifier of the workspace.</param>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// <param name="baseUrl"></param>
        /// <param name="version">Release date of the API version in YYYY-MM-DD format.</param>
        public WatsonConversationClient(string workspaceId, string userName, string password, string baseUrl = null, string version = null)
        {
            WorkspaceId = workspaceId;
            UserName = userName;
            Password = password;
            BaseUrl = baseUrl ?? DefaultBaseUrl;
            Version = version ?? DefaultVersion;
        }
    
        public string BaseUrl { get; private set; }
    
        /// <summary>Get a response to a user's input</summary>
        /// <param name="body">The user's input, with optional intents, entities, and other properties from the response.</param>
        /// <returns>Successful request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<MessageResponse> SendMessageAsync(MessageRequest body)
        {
            return SendMessageAsync(body, CancellationToken.None);
        }
    
        /// <summary>Get a response to a user's input</summary>
        /// <param name="body">The user's input, with optional intents, entities, and other properties from the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Successful request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<MessageResponse> SendMessageAsync(MessageRequest body, CancellationToken cancellationToken)
        {
            var url_ = $"{BaseUrl}/v1/workspaces/{WorkspaceId}/message?version={Version}&";
    
            var client_ = new HttpClient();

            var byteArray = Encoding.ASCII.GetBytes($"{UserName}:{Password}");
            client_.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));
    
            var content_ = new StringContent(JsonConvert.SerializeObject(body));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(MessageResponse); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<MessageResponse>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ == "400") 
            {
                var result_ = default(Error); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Error>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
                throw new SwaggerException<Error>("A server side error occurred.", status_, responseData_, result_, null);
            }
            else
            if (status_ == "404") 
            {
                var result_ = default(Error); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Error>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
                throw new SwaggerException<Error>("A server side error occurred.", status_, responseData_, result_, null);
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
}